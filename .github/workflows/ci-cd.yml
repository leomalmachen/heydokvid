name: 🏥 Heydok Video CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Testing
  backend-test:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: heydok_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔍 Lint with flake8
      run: |
        pip install flake8
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🎯 Type check with mypy
      run: |
        pip install mypy
        mypy app --ignore-missing-imports

    - name: 🧪 Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/heydok_test
        REDIS_URL: redis://localhost:6379/0
        LIVEKIT_URL: ws://localhost:7880
        LIVEKIT_API_KEY: test-key
        LIVEKIT_API_SECRET: test-secret
        SECRET_KEY: test-secret-key-for-ci
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-test:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/heydok-video-frontend/package-lock.json

    - name: 📦 Install dependencies
      working-directory: frontend/heydok-video-frontend
      run: npm ci

    - name: 🔍 Lint
      working-directory: frontend/heydok-video-frontend
      run: npm run lint

    - name: 🎯 Type check
      working-directory: frontend/heydok-video-frontend
      run: npm run type-check

    - name: 🧪 Run tests
      working-directory: frontend/heydok-video-frontend
      run: npm test -- --coverage --watchAll=false

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/heydok-video-frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Integration Tests
  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: heydok_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🚀 Start backend server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/heydok_test
        REDIS_URL: redis://localhost:6379/0
        LIVEKIT_URL: ws://localhost:7880
        LIVEKIT_API_KEY: test-key
        LIVEKIT_API_SECRET: test-secret
        SECRET_KEY: test-secret-key-for-ci
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: 🧪 Run integration tests
      run: |
        python test_heydok_integration.py --url http://localhost:8000

  # Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Bandit security scan
      run: |
        pip install bandit
        bandit -r app -f json -o bandit-report.json

    - name: 🔍 Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json

    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Build Docker Images
  build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, integration-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/heydok-video-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/heydok-video-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: frontend/heydok-video-frontend
        file: frontend/heydok-video-frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/heydok-video-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/heydok-video-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/

  # Deploy to Production
  deploy-production:
    name: 🏥 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏥 Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/

  # Notify
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 📢 Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Heydok Video deployed successfully to production!"
        else
          echo "❌ Heydok Video deployment failed!"
        fi 