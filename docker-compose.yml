version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: heydok-postgres
    environment:
      POSTGRES_DB: heydok_video
      POSTGRES_USER: heydok
      POSTGRES_PASSWORD: heydok_secure_pass_change_me
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U heydok -d heydok_video"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heydok-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: heydok-redis
    command: redis-server --requirepass redis_secure_pass_change_me
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heydok-network

  # LiveKit Server (for local development)
  livekit:
    image: livekit/livekit-server:latest
    container_name: heydok-livekit
    command: --config /etc/livekit.yaml
    volumes:
      - ./config/livekit.yaml:/etc/livekit.yaml
    ports:
      - "7880:7880"
      - "7881:7881"
      - "7882:7882/udp"
    environment:
      LIVEKIT_KEYS: "APIKey_change_me: secret_change_me"
    depends_on:
      - redis
    networks:
      - heydok-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: heydok-backend
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://heydok:heydok_secure_pass_change_me@postgres:5432/heydok_video
      
      # Redis
      REDIS_URL: redis://:redis_secure_pass_change_me@redis:6379/0
      
      # LiveKit
      LIVEKIT_URL: ws://livekit:7880
      LIVEKIT_API_KEY: APIKey_change_me
      LIVEKIT_API_SECRET: secret_change_me
      
      # Security
      SECRET_KEY: your_secret_key_here_change_me_32_chars_min
      JWT_SECRET_KEY: your_jwt_secret_here_change_me_32_chars_min
      
      # Application
      DEBUG: "true"
      ENVIRONMENT: development
      FRONTEND_URL: http://localhost:3000
      
      # Features
      FEATURE_RECORDING: "true"
      FEATURE_CHAT: "true"
      FEATURE_SCREEN_SHARE: "true"
      
      # Compliance
      HIPAA_COMPLIANCE: "true"
      GDPR_COMPLIANCE: "true"
      
      # Logging
      LOG_LEVEL: INFO
      STRUCTLOG_ENABLED: "true"
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
      - ./recordings:/app/recordings
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      livekit:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - heydok-network
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend/heydok-video-frontend
      dockerfile: Dockerfile
    container_name: heydok-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_LIVEKIT_URL: ws://localhost:7880
      REACT_APP_ENVIRONMENT: development
    volumes:
      - ./frontend/heydok-video-frontend/src:/app/src
      - ./frontend/heydok-video-frontend/public:/app/public
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - heydok-network
    restart: unless-stopped

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: heydok-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - heydok-network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: heydok-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - heydok-network
    restart: unless-stopped

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: heydok-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin_change_me
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - heydok-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  heydok-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 