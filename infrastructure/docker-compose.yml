version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: heydok_postgres
    environment:
      POSTGRES_DB: heydok_video
      POSTGRES_USER: heydok
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-heydok_secure_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - heydok_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U heydok -d heydok_video"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: heydok_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_pass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - heydok_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # LiveKit läuft in der Cloud - kein lokaler Server nötig
  # livekit:
  #   image: livekit/livekit-server:latest
  #   container_name: heydok_livekit
  #   command: --config /etc/livekit.yaml
  #   volumes:
  #     - ./livekit/livekit.yaml:/etc/livekit.yaml
  #   ports:
  #     - "7880:7880"
  #     - "7881:7881"
  #     - "50000-60000:50000-60000/udp"
  #   networks:
  #     - heydok_network
  #   depends_on:
  #     - redis
  #   environment:
  #     - LIVEKIT_REDIS_HOST=redis:6379
  #     - LIVEKIT_REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_pass}

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: heydok_backend
    environment:
      - DATABASE_URL=postgresql://heydok:${POSTGRES_PASSWORD:-heydok_secure_pass}@postgres:5432/heydok_video
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_pass}@redis:6379/0
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY:-APIwkvkVSaRyTE3}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET:-7FVh4h09qkZyejvgtV4Mc5Yo6uNgaMNVofxvCQBnRgf}
      - LIVEKIT_URL=${LIVEKIT_URL:-wss://google-meet-replacer-fcw5apmd.livekit.cloud}
      - SECRET_KEY=${SECRET_KEY:-your_secret_key_here}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_here}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your_encryption_key_here}
      - ENABLE_RECORDING=${ENABLE_RECORDING:-true}
      - ENABLE_CHAT=${ENABLE_CHAT:-true}
      - MAX_PARTICIPANTS=${MAX_PARTICIPANTS:-20}
    volumes:
      - ../backend:/app
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - heydok_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      # livekit:
      #   condition: service_started
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: heydok_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_LIVEKIT_URL=${LIVEKIT_URL:-wss://google-meet-replacer-fcw5apmd.livekit.cloud}
    volumes:
      - ../frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - heydok_network
    depends_on:
      - backend
    command: npm start

  nginx:
    image: nginx:alpine
    container_name: heydok_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - heydok_network
    depends_on:
      - backend
      - frontend
      # - livekit

networks:
  heydok_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  nginx_logs: 