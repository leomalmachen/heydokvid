# ===========================================
# HeyDok Video API - Configuration
# ===========================================

# REQUIRED: LiveKit Configuration
LIVEKIT_URL=wss://your-project.livekit.cloud
LIVEKIT_API_KEY=your_livekit_api_key_here
LIVEKIT_API_SECRET=your_livekit_api_secret_here

# Application Configuration
APP_NAME="HeyDok Video API"
APP_VERSION="1.0.0"
ENVIRONMENT=development  # development, staging, production
DEBUG=false
APP_URL=https://your-app.herokuapp.com

# Server Configuration
HOST=0.0.0.0
PORT=8000

# Database Configuration (choose one)
# SQLite (default for development)
DATABASE_URL=sqlite:///./heydok.db
# PostgreSQL (recommended for production)
# DATABASE_URL=postgresql://user:password@localhost:5432/heydok
# Heroku Postgres (auto-provided)
# DATABASE_URL=postgres://...

# Security Configuration
SECRET_KEY=your-super-secret-key-change-in-production-min-32-chars
# Comma-separated list of allowed origins
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000
# Optional API key for external integrations
API_KEY=

# File Upload Configuration
MAX_FILE_SIZE=10485760  # 10MB in bytes
ALLOWED_FILE_TYPES=pdf,jpg,jpeg,png,doc,docx
UPLOAD_DIR=uploads

# Meeting Configuration
MAX_PARTICIPANTS_PER_MEETING=10
MEETING_DURATION_HOURS=24
CLEANUP_INTERVAL_MINUTES=60

# Logging Configuration
LOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60

# ===========================================
# Production Settings Example
# ===========================================
# ENVIRONMENT=production
# DEBUG=false
# SECRET_KEY=your-production-secret-key-with-at-least-32-characters
# ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
# LOG_LEVEL=WARNING
# DATABASE_URL=postgresql://user:password@host:5432/dbname

# ===========================================
# Optional: External Services
# ===========================================
# Redis for caching/sessions (future use)
# REDIS_URL=redis://localhost:6379/0

# Email notifications (future use)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASSWORD=your-app-password

# Monitoring (future use)
# SENTRY_DSN=https://your-sentry-dsn
# PROMETHEUS_ENABLED=true 

# ===========================================
# Setup Instructions
# ===========================================
# 1. Copy this file to .env: cp env.example .env
# 2. Set your actual LiveKit credentials in .env
# 3. Never commit .env to version control
# 4. Use heroku config:set for production environment variables

# For LiveKit setup:
# 1. Sign up at livekit.io/cloud
# 2. Create a new project
# 3. Copy your URL, API Key, and API Secret
# 4. Set them in your .env file

# Example .env content:
# LIVEKIT_URL=wss://your-project-id.livekit.cloud
# LIVEKIT_API_KEY=APIxxxxxxxxxx
# LIVEKIT_API_SECRET=xxxxxxxxxxxxxxxx

# LiveKit Cloud Dashboard prüfen:
# 1. Login auf livekit.io/cloud
# 2. Ihr Project auswählen
# 3. Live Rooms überwachen
# 4. Connection Logs analysieren
# 5. Bandwidth/Quality Metrics prüfen

# Test-Sequenz durchführen:
# 1. Browser komplett schließen und neu öffnen
# 2. Incognito/Private Mode verwenden
# 3. Andere Browser testen (Chrome, Firefox, Safari)
# 4. Mobile vs Desktop testen
# 5. Verschiedene Netzwerke testen (WiFi, Mobile Data) 

# Isoliertes Testen verschiedener Komponenten:

# 1. Nur Backend API testen:
curl http://localhost:8000/health

# 2. Nur LiveKit Connection testen:
curl http://localhost:8000/test-livekit

# 3. Nur Token Generation testen:
curl -X POST http://localhost:8000/api/meetings/debug-token

# 4. Nur Frontend ohne LiveKit laden:
# Static HTML ohne JavaScript 

# .env Datei prüfen:
cat .env | grep LIVEKIT
echo "URL: $LIVEKIT_URL"
echo "KEY: ${LIVEKIT_API_KEY:0:10}..."
echo "SECRET: ${LIVEKIT_API_SECRET:0:10}..."

# Heroku Config prüfen (falls deployed):
heroku config:get LIVEKIT_URL
heroku config:get LIVEKIT_API_KEY 

# Browser Console: Kompletten Storage leeren
sessionStorage.clear();
localStorage.clear();
# Dann Hard Refresh: Ctrl+Shift+R (Windows) / Cmd+Shift+R (Mac)

# Service Worker prüfen (falls vorhanden):
navigator.serviceWorker.getRegistrations()
  .then(registrations => {
    registrations.forEach(reg => reg.unregister());
  }); 

// Browser Console: Timing-Probleme identifizieren
performance.mark('meeting-start');
// Nach Meeting-Initialisierung:
performance.mark('meeting-initialized');
performance.measure('meeting-init-time', 'meeting-start', 'meeting-initialized');
console.log(performance.getEntriesByType('measure')); 

# Welche JavaScript-Errors erscheinen?
# Was zeigt: console.log('LiveKit verfügbar:', typeof window.LiveKit !== 'undefined');
# Was zeigt: console.log('Room State:', room ? room.state : 'null'); 

# Sind WebSocket-Verbindungen zu LiveKit fehlgeschlagen?
# Welche HTTP-Status-Codes bei /api/meetings/*/join?
# Lädt livekit-client.umd.min.js erfolgreich? 

# Was zeigte der Python-Test der LiveKit Credentials?
# Funktioniert: curl http://localhost:8000/health
# Funktioniert: curl http://localhost:8000/test-livekit 

// Was zeigte dieser Test im Browser:
navigator.mediaDevices.getUserMedia({video: true, audio: true}) 

# Suchen Sie nach Errors wie:
# - "LiveKit SDK failed to load"
# - "Connection failed"
# - "Token invalid"
# - "WebSocket connection failed" 